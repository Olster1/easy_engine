static char *frag_model_shader = "struct Material {\n"
"    sampler2D diffuse;\n"
"    sampler2D specular;\n"
"    // sampler2D specular;\n"
"    \n"
"    float specularConstant;\n"
"};\n"
"\n"
"struct DirLight {\n"
"	vec3 ambient;\n"
"	vec3 diffuse;\n"
"	vec3 specular;\n"
"\n"
"	vec4 direction;\n"
"};\n"
"\n"
"in vec4 color_frag; \n"
"in vec3 normal_frag; //worldspace\n"
"in vec2 uv_frag; \n"
"in vec3 fragPos; //worldspace\n"
"\n"
"uniform Material material;\n"
"uniform DirLight lights[16];\n"
"out vec4 color;\n"
"uniform vec3 eye_worldspace; \n"
"\n"
"void main (void) {\n"
"    vec4 c = color_frag;\n"
"\n"
"    vec3 diffTex = vec3(texture(material.diffuse, uv_frag));\n"
"    vec3 specTex = vec3(texture(material.specular, uv_frag));\n"
"\n"
"    vec3 lightDir = vec3(normalize(-lights[0].direction));\n"
"    float diff = max(dot(normal_frag, lightDir), 0.0);\n"
"\n"
"    vec3 viewDir = normalize(eye_worldspace - fragPos);\n"
"    vec3 reflectDir = reflect(-lightDir, normal_frag);\n"
"    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.specularConstant);\n"
"\n"
"    vec3 ambientColor = diffTex * lights[0].ambient;\n"
"    vec3 diffuseColor = diff * diffTex * lights[0].diffuse;\n"
"    vec3 specularColor = spec * specTex * lights[0].specular;\n"
"\n"
"    color = c * vec4(ambientColor + diffuseColor + specularColor, 1.0);\n"
"}";

static char *frag_skybox_shader = "out vec4 FragColor;\n"
"\n"
"in vec3 TexCoords;\n"
"\n"
"uniform samplerCube skybox;\n"
"\n"
"void main()\n"
"{    \n"
"    FragColor = texture(skybox, TexCoords);\n"
"}";

static char *fragment_shader_texture_shader = "uniform sampler2D tex;\n"
"in vec4 colorOut;\n"
"in vec2 texUV_out;\n"
"\n"
"out vec4 color;\n"
"void main (void) {\n"
"	vec4 texColor = texture(tex, texUV_out);\n"
"	float alpha = texColor.w;\n"
"	if(alpha == 0) discard; \n"
"	vec4 b = colorOut*colorOut.w;\n"
"	vec4 c = b*texColor;\n"
"	c *= alpha;\n"
"    color = c;\n"
"}";

static char *vertex_model_shader = "in mat4 M;\n"
"in mat4 V;\n"
"in mat4 P;\n"
"in vec4 color;\n"
"in vec4 uvAtlas;	//not using a atlas\n"
"\n"
"in vec3 vertex;\n"
"in vec3 normal;\n"
"in vec2 texUV;	\n"
"\n"
"//outgoing variables\n"
"out vec4 color_frag; \n"
"out vec3 normal_frag;\n"
"out vec2 uv_frag;\n"
"out vec3 fragPos;\n"
"\n"
"void main() {\n"
"    \n"
"    gl_Position = P * V * M * vec4(vertex, 1);\n"
"    color_frag = color;\n"
"    normal_frag = mat3(transpose(inverse(M))) * normal;\n"
"    uv_frag = texUV;\n"
"    fragPos = vec3(M * vec4(vertex, 1));\n"
"}";

static char *vertex_shader_tex_attrib_shader = "in mat4 M;\n"
"in mat4 V;\n"
"in mat4 P;\n"
"in vec4 color;\n"
"in vec4 uvAtlas;	\n"
"\n"
"in vec3 vertex;\n"
"in vec2 texUV;	\n"
"\n"
"out vec4 colorOut; //out going\n"
"out vec2 texUV_out;\n"
"\n"
"void main() {\n"
"    \n"
"    gl_Position = P * V * M * vec4(vertex, 1);\n"
"    colorOut = color;\n"
"    \n"
"    int xAt = int(texUV.x*2);\n"
"    int yAt = int(texUV.y*2) + 1;\n"
"    texUV_out = vec2(uvAtlas[xAt], uvAtlas[yAt]);\n"
"}";

static char *vertex_skybox_shader = "in vec3 vertex;\n"
"\n"
"out vec3 TexCoords;\n"
"\n"
"uniform mat4 projection;\n"
"uniform mat4 view;\n"
"\n"
"void main()\n"
"{\n"
"    TexCoords = vertex;\n"
"    vec4 pos = projection * view * vec4(vertex, 1.0);\n"
"    gl_Position = pos.xyww;\n"
"}  ";

